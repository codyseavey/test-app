// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 4, 5, 19, 8, 25, 866387736, time.UTC),
		},
		"/favicon.ico": &vfsgen۰CompressedFileInfo{
			name:             "favicon.ico",
			modTime:          time.Date(2020, 4, 6, 0, 7, 12, 0, time.UTC),
			uncompressedSize: 15406,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6b\x54\x5c\xd5\x15\xbe\x6d\xfd\x6f\xfa\xa3\x7f\xed\x0c\xd8\x04\x8c\x69\x68\xab\xd6\xa4\xda\xea\x52\x5b\x5b\x6b\x57\x7d\xb4\xb6\xda\x95\xd5\x47\xac\x59\x5d\xb6\xa6\x6f\x6b\x53\x9b\xb6\xd6\xf8\x68\xf2\x43\x97\xda\x98\x19\x98\x81\x10\x1e\xf2\x26\x01\x85\x08\x84\x67\x20\x90\x04\x48\x00\x25\x14\xc1\x64\x24\x01\xee\xfb\xde\xb9\x77\x1e\x7c\x5d\x67\xdf\xb9\xc3\x2b\x04\x08\x2e\x86\x59\xde\xbb\xd6\xb7\x18\xce\x9c\x73\xf6\xb7\xf7\xd9\xfb\xcc\xbe\x67\x1f\x8e\xfb\x14\xf7\x19\x6e\xdd\x3a\xf6\xd7\xc5\xed\xb8\x86\xe3\x6e\xe1\x38\xce\xe5\xb2\xfe\x4f\xfb\x2c\xc7\x65\x5e\xc3\x71\x19\x19\xb1\xef\xd7\x73\x5c\xeb\xe7\x38\x2e\x8d\xe3\xb8\x75\xac\x1f\x67\xb5\x2f\xf4\x4c\x7a\xae\x7b\x96\xf7\xb8\x4c\xde\xe3\xc2\x32\x61\xae\x60\x6c\x7c\x8e\x15\x8c\x4d\x4a\x88\x79\x5b\x21\xe6\x6d\x99\xd5\x26\x64\x6f\x82\x90\x7b\x8b\xf5\x7d\xfe\x6d\xe0\xb3\xd2\x20\xe6\x7f\x0d\x82\x7f\x23\x78\x6f\x0a\xf8\xac\xf5\xd6\x77\x85\xdf\xa0\xcf\x6a\xd3\xd3\xb3\xc6\xcb\x15\x0f\x41\x6b\x7f\x9e\xda\xe5\xca\x1f\x40\x2a\xba\x07\xfa\xc9\x57\xa0\x77\xbc\x08\xe5\xe8\x0e\xa8\x8d\x7f\x86\xda\xf0\x5b\x48\x65\xf7\x43\xc8\xde\x0c\xbd\x73\x1f\xe4\xc3\x8f\x4c\x8f\xaf\x7a\x14\xfa\xa9\x57\xa0\x36\xfc\x0e\x5a\xc7\x4b\xd4\x5f\xaa\x78\x10\x5a\xcb\xb3\xd0\x5a\xff\x0e\xf5\xd8\x1f\xa0\x1d\x7f\x0e\x7a\xe7\x7f\xa0\x35\xef\x82\x52\xf3\x38\xf5\xb1\xc7\xb3\x76\x21\xe7\x4b\xf4\x99\xc9\x66\x9c\xc5\xb7\xee\x02\xef\x4b\x27\xdd\x98\x3e\x82\x2f\x9d\xbe\x13\xfc\x9b\xe8\x7b\x21\xfb\x8b\x33\x6c\xb2\x05\x72\xe5\xc3\x09\x5f\x9b\x04\x61\x45\xf1\xb3\xd2\xf8\x5d\x70\x63\x58\xe2\x93\x16\xdb\x63\xee\x58\x64\x9f\xc1\x6e\xee\xd3\x13\x6f\x7e\x7e\x17\xef\x71\x05\x56\xd1\xb6\x01\x26\x93\x64\x7b\x48\x76\x42\xd6\x38\x26\x7b\x35\xf5\x9e\x67\x87\x04\xca\x76\xe0\xc0\xc1\x27\x00\x2c\xdf\xd0\xdb\x9f\x4f\x1c\x87\xac\x0d\xd0\x4f\xbc\x04\xe5\xdd\x5f\x2d\xdc\xc7\x9b\x42\xb9\x86\x52\xfb\xcb\x78\xce\xc2\x20\x95\xdc\x4b\xb9\x92\x58\x78\x27\xfd\x2f\x97\x3f\x00\xb9\xea\x31\xca\x63\x58\xee\xc2\xda\x04\xff\x0d\x10\xf3\x6e\x9d\x3d\xd7\xe1\x47\xa0\xd4\x3e\x0e\xe1\xe0\x97\xad\xb6\xcc\xf5\x08\x05\xda\xc0\x7b\xdc\x97\x95\xaf\xb5\xfd\x13\xfa\x89\x97\x29\x7f\x0a\x8f\xf7\x40\xc8\xd9\x0c\xad\xed\x1f\x30\x06\xf2\x88\x93\x5a\xbf\x13\x52\xf1\xb7\x10\x1a\xad\x27\x3d\xa2\xda\x18\xe5\x82\xb6\x7d\x59\xbb\x3d\x97\x39\x54\x49\x79\x1f\xeb\xc7\xb8\x12\xc7\x43\xb7\x62\x2a\xa4\x41\x79\xe7\x67\x8b\xda\xcb\x1c\x2c\x81\x5c\xbd\x0d\xe1\xf1\x6e\xf0\x99\xd7\x5b\xb9\x26\xcb\xdd\xf2\xb7\x22\x74\xbe\x89\xe6\x0c\x05\x5a\x29\x67\xe5\x33\xbf\x80\xf0\xf8\x19\x98\xc3\xd5\x94\xc7\x31\x4e\xe6\xf0\xdb\xf1\x31\xb6\xbe\xc1\xd3\xaf\x43\x6d\xfc\x13\x42\x23\x47\x17\x94\x2b\xf8\x6f\x84\xde\xb5\x17\x51\xf5\x02\x84\x9c\x0c\x44\xa4\x11\x04\xcf\x66\x13\xa2\xca\x05\x9a\x8b\xd9\x45\xa9\xd9\x8e\xf0\xa5\xd3\x94\x1f\xb2\xfc\x55\xef\xdc\x0b\xa9\xf4\xbb\x30\x06\x0e\x51\x2e\x1c\x95\x47\x69\x8c\xd1\x9f\x8b\xd0\x85\x66\x5a\xa7\xf0\xa5\x6e\xe2\xc3\xda\xa5\xd2\xfb\xe6\xc9\x66\xbc\xd9\x38\xe3\xac\x1f\x42\xee\xcd\x16\xe7\xee\x37\xa0\xb5\xee\x26\x79\xe6\xff\x8e\x50\x1b\xfb\x2c\x95\x7f\x1f\xe1\x8f\xda\x2d\xdd\xc7\x3a\xe3\xfe\xc2\xd6\x40\x38\xf8\x15\x84\x46\xeb\xa0\xd4\xfc\x02\x7a\xc7\x0b\xd0\xdb\xf7\x40\x6b\xfe\x2b\xb4\xb6\xdd\x96\x9c\xb7\xee\x84\x31\x58\x3c\x3f\x46\x3a\xf7\x42\xeb\x78\x61\x4e\xbb\x9b\xe6\x61\x3a\x0a\xbe\x1b\x2c\xff\xab\x7c\x18\x6a\xd3\x5f\x62\x39\xff\x06\xca\xeb\xe3\x3a\x14\xde\x41\x36\x61\x7d\xd9\x18\x36\x96\xcd\xc1\xde\x03\xec\xf1\x34\xc7\x91\x1f\xcf\x93\xcf\xde\x11\x8c\xbe\x1c\xb2\x3b\xeb\xbf\xea\x31\xea\x4d\x81\x76\xfc\x5f\x96\xbf\x5f\x29\x4e\x1d\x38\x70\xe0\xe0\xe3\x43\x42\xdf\xbf\x62\xef\xbe\x09\x91\x3f\xe7\x1d\x78\x75\xdf\xbf\x3d\x96\xec\x95\x9e\x33\x24\xfb\x93\xc6\x71\x5c\x06\xc7\x71\x3f\x5d\xe4\x9c\x84\x3d\xfc\xfe\x94\x6b\x27\x0e\x5c\xf7\x13\xde\xe3\x6a\xe5\xbd\x2e\x7d\x0d\xc4\xce\xe5\x61\x71\x6b\x25\xae\xfb\x53\xae\xb5\xb9\xf3\x1e\xf7\x6b\xbc\xc7\x15\x4c\x38\xbf\xa5\x23\x48\x9c\x6d\xbb\x1f\x70\x19\x6b\x80\xd3\xf2\x70\xc0\x65\xc4\x7d\x26\xd1\x5c\xae\x1e\x6b\xdb\xdf\x17\x43\x32\x73\x77\xe0\xc0\x81\x03\x07\x0e\x1c\x38\x98\x09\x3a\x13\xbe\x0d\x62\xec\xbc\x34\xd9\x20\x1f\xf9\x11\x9d\x23\x47\x26\xce\x5c\xf6\x4c\x74\xcd\xc3\x97\x4e\x67\xc0\xea\xb1\xdf\x23\x34\x52\x4b\x67\xcf\x09\xe7\x74\x15\x10\xb2\x37\xc1\x38\x57\x46\x67\xd6\x4b\x1b\xe3\x86\x58\x74\x37\xf4\xf6\x7f\x23\xd8\xfd\x5f\xba\x87\x62\xd7\x62\x6c\x48\x65\xf7\xd3\x99\x7a\xb0\xfb\x0d\xa8\x75\xbf\x81\xe0\xdb\x18\x5b\xf3\x47\x11\xec\xd9\x0f\xb5\x61\x27\xc4\xa2\x7b\xa0\x54\x6f\xa3\x73\x7c\x7b\x9c\x58\x70\x7b\xec\xdc\x7c\x8e\xcc\xcc\xf5\x50\xeb\x9f\x42\xf0\xf4\x6b\xd0\xbb\xf6\x41\xaa\x78\x60\x46\x2d\xc7\x4d\x6b\x10\x1e\xef\x05\xef\x4d\x5d\x92\xdf\x45\xc4\x21\x98\x1f\xd4\xc0\x18\x28\x40\x64\xb2\xdf\xaa\xdf\xf8\xd2\x88\x8b\xde\xf9\x32\xa2\x4a\x80\xce\xc2\x19\xff\xd0\xf0\xdb\x90\x2b\x1e\x24\x9d\xa6\x0c\x01\xc1\x5e\x0f\x8c\xf7\x0a\xa8\x26\x62\xbc\x5f\x34\xad\xbb\x37\x15\xe6\x60\x29\xa2\xca\x79\xab\x3e\x60\xeb\x94\xb7\x85\xea\x15\xe1\x4b\xdd\x64\x2f\xa3\xff\xa0\x55\xcf\xc8\xda\x10\xd3\xed\x7a\x04\x4f\xbd\x0a\x44\x42\x4b\x5a\x03\x21\x27\x03\x52\xd9\xf7\xe2\xba\x32\x5e\x51\x6d\x0c\x4a\xdd\xaf\x21\x57\x3e\x44\xbc\x66\xc7\x93\x9b\xf6\x0a\xb5\xe9\x69\x44\xa4\xe1\x78\x4d\xcc\x78\xaf\x90\xf4\xb0\xf9\x4b\xa5\xf7\x91\xde\x91\xc9\x01\xaa\x7d\x59\x35\xa4\x54\xaa\xdd\x85\xce\x37\x92\xdc\xf8\x9c\x33\xec\x2c\x1e\xfa\x2a\xc2\x63\x27\x60\x9c\x2b\x47\xf8\x62\x17\xdd\x65\x5a\x8e\xff\x49\x45\x77\x23\xaa\x06\xa0\x75\xec\x81\xd6\xfc\x0c\xc2\x17\x4f\x5a\x75\xaf\xcc\xd4\x69\x30\x9f\xcb\xbd\x89\x6c\x68\x0e\x57\x51\x2d\xcb\x1c\x2c\x99\xe6\xcf\x78\x76\xed\xa3\xba\x98\x72\x74\x07\x42\x1f\x1e\x23\x3d\x05\xff\x46\x98\xe7\xca\xa1\xb5\xfc\x6d\xf6\x7c\x33\xf8\x2b\xf5\x4f\x91\x7e\x6c\x2f\x65\xbe\xa0\xd4\x3e\xb1\x34\xee\x59\x1b\x88\xbb\x39\x54\x81\x29\x53\xa2\x35\x61\x72\xa6\x42\x1a\x22\xd2\x07\x71\x4c\x99\x32\xdd\xc5\xa2\x75\xf0\xa5\x43\xa9\x7b\x12\xc1\x9e\x37\xc9\x56\x36\x7f\xdb\x86\x4a\xcd\x76\xaa\x7f\x85\x02\x6d\xe4\xa7\x82\xff\x46\xaa\x27\x32\xbf\xb3\xe7\x8b\xca\x23\x88\xea\xe3\x90\x0f\xff\xd0\xaa\x81\x5d\x3c\x09\xfd\xf8\x73\xe0\xbd\x6e\xaa\x63\x1a\x03\xf9\xf3\xe2\x71\x2e\x98\x7f\x32\x0e\x51\x79\x14\x91\x89\x3e\x8a\x61\x8a\x8d\xea\x6d\x96\xff\x16\xdf\x6b\xd9\x2f\xf7\x66\x84\x3f\xea\xa0\x1a\xda\xdc\x39\x28\xbe\xcf\xfa\xe8\xee\x9b\xf2\xee\x93\x08\x07\x5a\x20\xe4\xde\x14\xf3\x99\x17\x29\x6e\x18\x3f\x16\xb3\x4c\x07\xb6\x3f\xb2\x39\xe5\xaa\xc7\x68\xbd\x29\xfe\x6b\x9f\x40\x54\xfe\x10\x52\xd1\x5d\xf1\xf8\x67\xba\x4b\xc5\xdf\xbc\xc2\x7e\xb5\xd9\xb2\x89\x29\xd2\x1e\x24\xe6\x6f\x9d\x5e\x4f\x5f\x3a\xad\x07\x71\x6e\xd9\x05\xa3\xef\x20\x22\xfc\x00\xcd\x4b\x3e\xdf\x7b\x00\x6a\xe3\x1f\x09\x91\x49\x5b\x6f\xb7\x65\xc3\xf6\x3d\xb1\x9a\xa9\x8b\xe4\x33\xdb\xb0\x7d\x46\x2a\xf9\x36\x22\xc2\xfb\x30\xfa\xb2\xc9\x0e\xec\x37\x8b\xc5\x30\xf3\x2d\x26\x27\xd8\x97\x13\x1f\xc7\x6c\x11\x3c\x93\x09\xbd\xfb\xf5\x2b\xfb\x7b\x90\x8f\xd7\x86\xe7\xc1\x9b\x4a\xdc\x99\x1e\x46\xaf\xd7\xba\x7b\x68\xfb\x6a\xcd\x76\x6b\xff\x18\xaa\x84\xd2\xb0\x93\xe2\x84\xad\x91\xde\xb9\x0f\x62\xfe\xed\xb3\xe6\xd1\x9a\x9e\xa1\xfe\x7c\xec\xfe\xa2\xd1\xeb\xa1\x39\x29\x16\xbc\xa9\xb4\x2f\xb1\x35\x9c\x39\x3f\xf1\x2b\xf9\x0e\xf4\x8e\x85\xef\x0b\xd8\xfb\x84\x58\xf0\xf5\x65\xc5\xf9\x5a\x01\xd3\x9b\xad\xbd\x7e\xea\x55\x8a\x3b\xf6\x1b\xc4\x7e\x5b\x12\xcd\x6b\xc9\xf0\xba\xa1\xbc\xf3\x73\x44\xc6\x7b\xac\xf8\x9d\xec\x9f\x77\xf7\x34\x19\xc0\xe2\x87\xea\xe5\xfe\x8d\x09\xe7\xe2\xc0\x81\x03\x07\x0e\x1c\x38\x70\xf0\xb1\x23\x99\x6b\x90\xb1\xfb\x04\x09\xe7\x71\xf5\x68\x8d\xd5\xe0\x93\xe9\xee\x83\x8d\xa0\x7d\x8f\x83\xee\x42\x24\xd3\x1d\x08\xe2\x6a\xdd\xdf\x48\xf6\xfb\x33\xce\xe3\x3c\x2b\x79\xfe\x1f\x00\x00\xff\xff\x2c\x2f\x6d\x4f\x2e\x3c\x00\x00"),
		},
		"/hello.html": &vfsgen۰CompressedFileInfo{
			name:             "hello.html",
			modTime:          time.Date(2020, 4, 5, 18, 54, 20, 575908056, time.UTC),
			uncompressedSize: 129,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcd\xc1\x09\x03\x41\x08\x05\xd0\xbb\x55\xb8\x15\x4c\x03\x1f\xcf\x69\x23\x89\x92\x09\x98\x38\x6c\x84\xb0\xdd\x2f\xe2\x9e\x44\x79\xfe\x8f\x4d\xe3\x99\xc7\x32\x9e\xf9\x71\x21\xf4\x20\x4c\xbb\xab\x10\x33\x33\xf2\x9d\x6e\x72\x33\xf7\xd8\x30\x7a\x23\x8c\x16\x84\x47\xe8\x71\xc9\x25\xf8\xe5\x1e\xdf\x97\xcc\xd2\xfc\x8f\xdd\x15\xe3\xba\x61\xac\xfa\x6b\x5f\x01\x55\x75\x06\x00\x00\xff\xff\x48\x83\xdc\x09\x81\x00\x00\x00"),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2020, 1, 25, 23, 50, 7, 152000000, time.UTC),
			uncompressedSize: 139,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcd\xc1\x0d\xc3\x30\x08\x85\xe1\x3b\x53\x90\x09\xbc\xc0\x13\x53\x64\x81\xb4\x46\x4d\x25\xa7\x46\xcd\x3b\xd4\xdb\x57\x16\x3e\x21\xfd\xe2\x03\x6c\xb5\x3f\x39\xc2\xf5\xe4\xd5\x4c\x90\x43\x70\xfa\x51\x4d\x54\x55\xc1\x37\x9b\xdb\xee\x37\x75\xf7\x2b\xda\x41\xdf\x50\xb2\x0a\x4a\x6e\x0a\x1e\xbd\x8e\x25\xc2\x70\xf3\xdb\x3f\x2f\xe3\x02\x4a\xff\x11\x65\x55\x94\x98\x32\xc5\x3c\x31\x9f\xfe\x03\x00\x00\xff\xff\x17\x72\x8c\x96\x8b\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/favicon.ico"].(os.FileInfo),
		fs["/hello.html"].(os.FileInfo),
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
